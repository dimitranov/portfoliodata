{
  "details": {
    "url_link": "https://movieblob.github.io/",
    "title": "Movie Blob",
    "text": "Find movies and tv shows, Serch by year, name, genre and more. Explore the top rated and upcoming. Save movies and tv shows you like I a personal list so you don't forget them. ",
    "time": "  02 Jan 2018 - 12 Jan 2018 - 50h",
    "learned": " HTTP requests / Axios , Redux Basic App Structure , Functional Components",
    "practiced": " Firebase Authentication, User Base Data, CSS3 - Animations, jQuery UX , Redux Composition, React Functional Components, HTTP requests",
    "techs": [
      "redux_logo",
      "react_logo",
      "firebase_logo",
      "es6",
      "jquery",
      "css3",
      "html5"
    ],
    "responsive": {
      "isPhone": true,
      "isTablet": true,
      "isDesctop": true
    },
    "hasDesktopImg": true,
    "hasMobileImg": true
  },
  "case_study": [
    {
      "type": "main_heading",
      "value": "IDEA & PURPOSE"
    },
    {
      "type": "sub_heading",
      "value": "Idea"
    },
    {
      "type": "text",
      "value": "The main idea behind the project is creating a web application for searching and finding a new movie or TV show by the user for reading information, adding in a personal list or watching online. "
    },
    {
      "type": "sub_heading",
      "value": "Purpose"
    },
    {
      "type": "text",
      "value": "I wanted to learn more about CRUD API-s and how to us Axios Async HTTP Requests and managing different data responses and also user based database."
    },
    {
      "type": "main_heading",
      "value": "THE DEVELOPING PROCESS"
    },
    {
      "type": "sub_heading",
      "value": "Setup"
    },
    {
      "type": "text",
      "value": "In this Setup section, i  will be telling you about how was the project setup, the steps I took, the actions I did and more."
    },
    {
      "type": "text",
      "value": "Now I would be explaining in details how I did the project  and structured the code but I will walk you  through all steps and explain why I did them and how the project benefited."
    },
    {
      "type": "text",
      "value": "After creating the wireframes and user application use steps I proceed in creating the code-base itself."
    },
    {
      "type": "text",
      "value": "First, of all building, a ReactJs application starts with one command executed in the project directory. And I'm talking about %create-react-app this created a simple but very functional environment for developing a ReactJs application, both simple and complex. Then I started adding different packages using %nodejs %npm, the packages I added can be found in the %package.json file of the directory I linked in the details of the project above. Some among them are %firebase , %redux  and %react-router ."
    },
    {
      "type": "text",
      "value": "Now after creating the application and adding the packages I needed it was time to start the fun part ... CODE. "
    },
    {
      "type": "sub_heading",
      "value": "Adding Redux"
    },
    {
      "type": "text",
      "value": "Since I had not use redux before this app, at first it was hard for me to unserstand the paradigm and hook up my app to use redux. But after 3 or 4 videos and re-reading the needed documentation, i understand it and was ready to implement and start using it. "
    },
    {
      "type": "text",
      "value": "I creating the Redux store as a variable in the %index.js file and passed it as a property of the Provider Component who wraps all the other components and letting them access to the state of the application. The state is created from multiple reducers via the %combineReducers method we import from redux.\nThere are 4  reducers in  this application  one for  handling all the move actions like filtering, injecting the data from the CRUD API in the application  state and filtering, another with the same functions for the tv show data , one for the move sliders  and one user reducer for handling and using user data like personal lists and login data."
    },
    {
      "type": "text",
      "value": "From this point on all, we needed to do is use %connect to connect the state we pass from the PRovider component as a property of the component we work on, with %mapStateToProps and also create actions which we will execute from the component and link them to it with %mapDispatchToProps and pretty much this was it. Redux allowed us to have full control for the total state of the application and change it in an immutable fashion from any component that we like."
    },
    {
      "type": "sub_heading",
      "value": "Adding Router"
    },
    {
      "type": "text",
      "value": "React Router is very simple to implement, but in this application, we wanted to have 3 types of Routes. A normal %<Route/> accessible to all users no matter logged or not, A special %<PrivateRouter/> which if entered and the %state.authed property is %false resolves in a %<Redirect/> and a third type called %<LoginRoute/> with the opposite logic of the <PrivateRoute/> ... il explain the use of those routes in a second."
    },
    {
      "type": "text",
      "value": "Let's talk about the router structure of the application. First, we have a %/ route which renders the %Home Component, after then we have %/discover ,  %/toprated , %/upcoming basic routes each rendering their page component. Then we have %/movie/:movieId route and /tv/:tv=Id those are routes with parameters , rendering a %<Movie/> or %<TvShow/> component. Later on, i will explain why and what is this parameter. Then we have the two special routes, the First one %<LoginRoute/> is used for rendering both %<Login/> and %<Registration/> components, The routes function like this: %this.state.authed value, this value is a %boolean ( if its %true the user is logged in already, if %false it's not),  on entering this route first  thing that we do is check this value of the state if its %false meaning that  we dont have a crrentlyLogged user we can render the registration  of  login component and user can log in to creating an  accout, but its the value is %true  on the other hand we have an awready loged user that we %<Redirect/> to the %/ route and render the <Home/> component. The other Custom route is the <PrivateRoute/> this route renders the user personal list of Movies and TV shows, again the login is the same but reversed if a user is logged - display the %/mylist router if no <Redirect/> to the %/ route."
    },
    {
      "type": "sub_heading",
      "value": "The API"
    },
    {
      "type": "text",
      "value": "%www.themoviedb.org provide an amazing API for fetching move, tv show, actor, and almost everything related to the movie industry data. Now let's talk about, how I use the API for the application purposes."
    },
    {
      "type": "text",
      "value": "In the application I use 2 types of data fetching, let's call them %'multiple' and %'single' for fetching data for multiple movies and for a single movie. I will start with the %'multiple' fetching. As I researched the  API documentation and performed a few test of the API in  the Chrome Console I found out that no matter what  type of %'multiple' fetch I do, I get an Array of 20 objects , each object is a movie that contains %key: value pairs like name, realease_date, poster_path and more. The array I got was based on the structure of the URL I fetch the data from. "
    },
    {
      "type": "text",
      "value": "Then when I got a good understanding of the data that I get from the API call I needed to display this data on the %VIew somehow. So I Created a %<Movies/> component and a %<Unit/> component. When the %<Movies/> is rendered somewhere it needs a %data property of %PropType.Array which is the array of object gained from the API call.  "
    },
    {
      "type": "text",
      "value": "Then when I got a good understanding of the data that I get from the API call I needed to display this data on the %VIew somehow. So I Created a %<Movies/> component and a %<Unit/> component. When the %<Movies/> is rendered somewhere it needs a %data property of %PropType.Array which is the array of object gained from the API call.  Then via the %ES6 method %Array.prototype.map() for each Object in that array I render a %<Unit/> component that is the single movie in a movie list. This component is basically a %<Link/> that wraps some data like the poster-path, name, and rate. So the %<Unit/> component needs 2 properties a %data prop of type Object that passes those %poster_path, %name  (e.t.) to the View and a  %isTV prop that I a boolean and tells is it a <Link/> to a TV Component / Route of a MOVIE one."
    }
  ]
}
